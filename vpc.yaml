AWSTemplateFormatVersion: 2010-09-09

# -----------------------------------------
#         DESCRIPTION SECTION
# -----------------------------------------
Description: >- 
  This template creates the networking components of our app
  1. VPC
  2. 4 subnets (2 Public and 2 Private Ones)
  3. Internet Gateway
  4. 2 Elastic IPs
  5. 2 NAT Gateways
  6. 4 Route Tables 
    - 2 associated with the public subnets and 
    - 2 associated with the private subnets
  7. Routes that point to both the IGW and NAT Gateway
  8. Interface for parameters


# -----------------------------------------
#          RESOURCES SECTION
# -----------------------------------------
Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name 
          Value: "Demo VPC"
  
  # Creates Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-IGW" 
  
  # Attaches Internet Gateway to Demo VPC
  VPCGatewayAttachment:  
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - VPC
      - IGW
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  
  # Creates Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC
  
  # Creates Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      #AvailabilityZone: !Ref AvailabilityZoneB
      AvailabilityZone: "us-east-1b"
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC
  
  # Creates Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      #AvailabilityZone: !Ref AvailabilityZoneA   
      AvailabilityZone: "us-east-1a"
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 1
      VpcId: !Ref VPC
  
  # Creates Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      #AvailabilityZone: !Ref AvailabilityZoneB
      AvailabilityZone: "us-east-1b"
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: Private Subnet 2
      VpcId: !Ref VPC
  
  # Creates Elastic IP 1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Elastic IP 1

  # Creates Elastic IP 2
  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value:  Elastic IP 2

  # Creates NAT Gateway # 1
  NATGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: 
      - EIP1
      - PublicSubnet1
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP1
          - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: 
        - Key: Name 
          Value: !Sub "${AWS::StackName}-NAT1"
    
  # Creates NAT Gateway # 2
  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: 
      - EIP2
      - PublicSubnet2
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP2
          - AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags: 
        - Key: Name 
          Value: !Sub "${AWS::StackName}-NAT2"



  # -----------------------------------------
  #           CUSTOM ROUTE TABLES
  # -----------------------------------------
  
  # Creates Public Route Table for Public Subnet 1
  PublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: IGW
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Public Subnet 1 Route Table

  # Creates Public Route Table for Public Subnet 2
  PublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: IGW
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Public Subnet 2 Route Table
  
  # Creates Private Route Table for Private Subnet 1
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Private Subnet 1 Route Table
  
  # Creates Private Route Table for Private Subnet 2
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Private Subnet 2 Route Table


    # -----------------------------------------
    #           ROUTE TABLE ROUTES
    # -----------------------------------------
  
  # Creates Route to Internet Gateway for Public Route Table AZ A
  PublicSubnet1RouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  
  # Creates Route to Internet Gateway for Public Route Table AZ B
  PublicSubnet2RouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  
  # Creates Route to NAT Gateway 1 for Private Route Table AZ A
  PrivateSubnet1RouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
  
  # Creates Route to NAT Gateway 2 for Private Route Table AZ B
  PrivateSubnet2RouteTableRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
  

    # -----------------------------------------
    #   ROUTE TABLES AND SUBNETS ASSOCIATIONS
    # -----------------------------------------

  # Creates Association Between Public Route Table and Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnet1RouteTable
  
  # Creates Association Between Public Route Table and Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnet2RouteTable

  # Creates Association Between Private Route Table and Private Subnet 1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable
  
   # Creates Association Between Private Route Table and Private Subnet 2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable



# # -----------------------------------------
# #          OUTPUTS SECTION
# # -----------------------------------------
# # Outputs IDs 
Outputs:
  VpcId:
    Description: VPC Id
    Value: !Ref VPC
    
  
  PublicSubnet1: 
    Description: Public Subnet 1 Id
    Value: !Ref PublicSubnet1
    
  
  PublicSubnet2: 
    Description: Public Subnet 2 Id
    Value: !Ref PublicSubnet2
    
  
  PrivateSubnet1: 
    Description: Private Subnet 1 Id
    Value: !Ref PrivateSubnet1
    
  
  PrivateSubnet2: 
    Description: Private Subnet 2 Id
    Value: !Ref PrivateSubnet2
    
